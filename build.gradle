buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath 'io.github.fvarrui:javapackager:1.6.7'
    }
}

plugins {
    id 'java'
    id 'maven-publish'
}

apply plugin: 'io.github.fvarrui.javapackager.plugin'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}
dependencies {
    implementation 'com.github.Osiris-Team:Desku:0.5.1'
    implementation 'commons-io:commons-io:2.6'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}
test {
    useJUnitPlatform()
}

import io.github.fvarrui.javapackager.gradle.PackageTask;
import io.github.fvarrui.javapackager.model.*;

group = 'com.osiris'
version = '1.0.0'
description = 'Desku example app.'
sourceCompatibility = '1.8'
compileJava.options.encoding = 'UTF-8'

javapackager {
    mainClass = 'com.osiris.deskuapp.Main'
    additionalResources = [ file('src/main/resources/info.txt') ]
    bundleJre = true
    generateInstaller = true
    vmArgs = ["-Djava.library.path=."]
    administratorRequired = false
}

task packageForWindows(type: PackageTask, dependsOn: build) {
    description = 'Packages the application as a native Windows executable and bundles it in a zipball'
    platform = 'windows'
    createZipball = true
    winConfig {
        vmArgs = ["-Dprism.maxvram=512m -XX:+UseG1GC"]
        generateSetup = true
        generateMsi = true
        icoFile = file("windows/HelloWorldGradle.ico")
        setupMode = SetupMode.askTheUser
        removeOldLibs = true
        disableDirPage = false
        disableFinishedPage = false
        disableWelcomePage = false
        createDesktopIconTask = false
    }
}

task packageForLinux(type: PackageTask, dependsOn: build) {
    description = 'Packages the application as a native GNU/Linux executable and bundles it in a tarball'
    platform = 'linux'
    bundleJre = true
    createTarball = true
    scripts {
        bootstrap = file('assets/bootstrap.sh')
    }
}

task packageForMac(type: PackageTask, dependsOn: build) {
    description = 'Packages the application as a native Mac OS app and bundles it in a tarball'
    platform = 'mac'
    createTarball = true
    scripts {
        bootstrap = file('assets/bootstrap.sh')
    }
    macConfig {
        infoPlist.additionalEntries = '''
			<key>LSUIElement</key>
			<true/>
		'''
    }
}

task packageForAllPlatforms(dependsOn: [ packageForWindows, packageForMac, packageForLinux ]) {
    description = 'Packages the application for all platforms'
    group = 'JavaPackager'
}